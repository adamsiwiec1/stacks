# From Documentation as of 2022-11-16: https://docs.localstack.cloud/localstack/configuration/
LOCALSTACK_HOSTNAME=192.168.1.38
DEBUG=1
PERSISTENCE=1                    # Persist among services. https://docs.localstack.cloud/localstack/persistence-mechanism/
LAMBDA_EXECUTOR=docker-reuse     # https://docs.localstack.cloud/localstack/configuration/
DOCKER_HOST=unix://var/run/docker.sock
DOCKER_SOCK=unix://var/run/docker.sock

# NEED TO FILL IN EXAMPLES FOR ALL THESE

# # Core Features
# EDGE_BIND_HOST=0                    # Address the edge service binds to.
# EDGE_PORT=0                         # Port number for the edge service, the main entry point for all API invocations.
# HOSTNAME=0                          # Name of the host to expose the services internally. For framework-internal communication, e.g., services are started in different containers using docker-compose.
# HOSTNAME_EXTERNAL=0                 # Name of the host to expose the services externally. This host is used, e.g., when returning queue URLs from the SQS service to the client.
# DEBUG=0                             # Flag to increase log level and print more verbose logs (useful for troubleshooting issues)
# IMAGE_NAME=0                        # Specific name and tag of LocalStack Docker image to use.
# USE_LIGHT_IMAGE=0                   # Whether to use the light-weight Docker image. Overwritten by IMAGE_NAME.
# LEGACY_DIRECTORIES=0                # Use legacy method of managing internal filesystem layout. See filesystem layout.
# PERSISTENCE=0                       # Enable persistence. See persistence mechanism and filesystem layout.
# PERSIST_ALL=0                       # Whether to persist all resources (including user code like Lambda functions), or only “light-weight” resources (e.g., SQS queues, or Cognito users). Can be set to false to reduce storage size of DATA_DIR folders or Cloud Pods.
# MAIN_CONTAINER_NAME=0               # Specify the main docker container name
# INIT_SCRIPTS_PATH=0                 # Specify the path to the initializing files with extensions .sh that are found default in /docker-entrypoint-initaws.d.
# LS_LOG=0                            # Specify the log level. Currently overrides the DEBUG configuration. trace for detailed request/response, trace-internal for internal calls, too.
# EXTERNAL_SERVICE_PORTS_START=0      # Start of the external service port range (included).
# EXTERNAL_SERVICE_PORTS_END=0        # End of the external service port range (excluded).
# EAGER_SERVICE_LOADING=0             # Boolean that toggles lazy loading of services. If eager loading is enabled, services are started at LocalStack startup rather than their first use. Eager loading significantly increases LocalStack startup time.

# # Docker Features
# DOCKER_FLAGS=0                      # Allows to pass custom flags (e.g., volume mounts) to “docker run” when running LocalStack in Docker.
# DOCKER_SOCK=0                       # Path to local Docker UNIX domain socket
# DOCKER_BRIDGE_IP=0                  # IP of the docker bridge used to enable access between containers
# LEGACY_DOCKER_CLIENT=0              # Whether LocalStack should use the command-line Docker client and subprocess execution to run Docker commands, rather than the Docker SDK.
# DOCKER_CMD=0                        # Shell command used to run Docker containers (only used in combination with LEGACY_DOCKER_CLIENT)
# FORCE_NONINTERACTIVE=0              # When running with Docker, disables the --interactive and --tty flags. Useful when running headless.

# # IAM Features
# ENFORCE_IAM=0        #Enable IAM policy evaluation and enforcement. If this is disabled (the default), IAM policies will have no effect to your requests.
# LEGACY_IAM_PROVIDER=0        #(deprecated) Enable the pre-1.0 legacy IAM provider
# IAM_SOFT_MODE=0        #Enable IAM soft mode. This leads to policy evaluation without actually denying access. Needs ENFORCE_IAM enabled as well. For more information, see Identity and Access Management.

# # Lambda Features
# LAMBDA_EXECUTOR=0        #Method to use for executing Lambda functions. For docker and docker-reuse, if LocalStack itself is started inside Docker, then the docker command needs to be available inside the container (usually requires to run the container in privileged mode). More information in Lambda Executor Modes.
# =0        #Run each function invocation in a separate Docker container.
# =0        #Run Lambda functions in a temporary directory on the local machine.
# =0        #Create one Docker container per function and reuse it across invocations.
# LAMBDA_STAY_OPEN_MODE=0        #Usage of the stay-open mode of Lambda containers. Only applicable if LAMBDA_EXECUTOR=docker-reuse. Set to 0 if you want to use Hot Swapping.
# LAMBDA_REMOTE_DOCKER=0        #determines whether Lambda code is copied or mounted into containers
# =0        #your Lambda function definitions will be passed to the container by copying the zip file (potentially slower). It allows for remote execution, where the host and the client are not on the same machine.
# =0        #your Lambda function definitions will be passed to the container by mounting a volume (potentially faster). This requires to have the Docker client and the Docker host on the same machine.
# LAMBDA_TRUNCATE_STDOUT=0        #Allows increasing the default char value for truncation of lambda logs.
# BUCKET_MARKER_LOCAL=0        #Optional bucket name for running lambdas locally.
# LAMBDA_CODE_EXTRACT_TIME=0        #Time in seconds to wait at max while extracting Lambda code. By default it is 25 seconds for limiting the execution time to avoid client/network timeout issues.
# LAMBDA_DOCKER_NETWORK=0        #Optional Docker network for the container running your lambda function. This configuration value also applies to ECS containers. Needs to be set to the network the LocalStack container is connected to if not default bridge network.
# LAMBDA_DOCKER_DNS=0        #Optional DNS server for the container running your lambda function.
# LAMBDA_DOCKER_FLAGS=0        #Additional flags passed to Lambda Docker run|create commands (e.g., useful for specifying custom volume mounts). Does only support environment, volume, port and add-host flags
# LAMBDA_CONTAINER_REGISTRY=0        #An alternative docker registry from where to pull lambda execution containers.
# LAMBDA_REMOVE_CONTAINERS=0        #Whether to remove containers after Lambdas being inactive for 10 minutes. Only applicable when using docker-reuse executor.
# LAMBDA_FALLBACK_URL=0        #Fallback URL to use when a non-existing Lambda is invoked. Either records invocations in DynamoDB (value dynamodb://<table_name>) or forwards invocations as a POST request (value http(s)://...).
# LAMBDA_FORWARD_URL=0        #URL used to forward all Lambda invocations (useful to run Lambdas via an external service).
# LAMBDA_JAVA_OPTS=0        #Allow passing custom JVM options to Java Lambdas executed in Docker. Use _debug_port_ placeholder to configure the debug port, e.g., -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=_debug_port_.
# HOSTNAME_FROM_LAMBDA=0        #Endpoint host under which APIs are accessible from Lambda containers (optional). This can be useful in docker-compose stacks to use the local container hostname if neither IP address nor container name of the main container are available (e.g., in CI). Often used in combination with LAMBDA_DOCKER_NETWORK.
# LAMBDA_XRAY_INIT=0        #Whether to fully initialize XRay daemon for Lambda containers (may increase Lambda startup times)
# SYNCHRONOUS_KINESIS_EVENTS=0        #Whether or not to handle Kinesis Lambda event sources as synchronous invocations.

# # DynamoDB Features
# DYNAMODB_ERROR_PROBABILITY=0        #Randomly inject ProvisionedThroughputExceededException errors into DynamoDB API responses.
# DYNAMODB_HEAP_SIZE=0        #Sets the JAVA EE maximum memory size for DynamoDB; full table scans require more memory
# DYNAMODB_SHARE_DB=0        #When activated, DynamodDB will use a single database instead of separate databases for each credential and region.
# DYNAMODB_IN_MEMORY=0        #When activated, DynamodDB will start in in-memory mode, which can have a faster throughput. If you use this options, both persistence and cloud pods will not work for DynamoDB
# DYNAMODB_OPTIMIZE_DB_BEFORE_STARTUP=0        #Optimize the database tables in the store before starting
# DYNAMODB_DELAY_TRANSIENT_STATUSES=0        #When activated, DynamoDB will introduce artificial delays in resource creation to simulate the actual cloud service more closely. Currently works only for CREATING and DELETING online index statuses.
# DYNAMODB_CORS=0        #Enable CORS support for specific allow-list list the domains separated by , use * for public access (default is *)


# # SQS Features
# SQS_DELAY_PURGE_RETRY=0        #Used to toggle PurgeQueueInProgress errors when making more than one PurgeQueue call within 60 seconds.
# SQS_DELAY_RECENTLY_DELETED=0        #Used to toggle QueueDeletedRecently errors when re-creating a queue within 60 seconds of deleting it.
# SQS_ENDPOINT_STRATEGY=0        #Configures the format of Queue URLs (see SQS Queue URLs)

# # Kinesis Features
# KINESIS_ERROR_PROBABILITY=0        #Randomly inject ProvisionedThroughputExceededException errors into Kinesis API responses.
# KINESIS_SHARD_LIMIT=0        #Integer value , causing the Kinesis API to start throwing exceptions to mimic the default shard limit.
# KINESIS_LATENCY=0        #Integer value of milliseconds, causing the Kinesis API to delay returning a response in order to mimic latency from a live AWS call.
# KINESIS_INITIALIZE_STREAMS=0        #A comma-delimited string of stream names, its corresponding shard count and an optional region to initialize during startup. If the region is not provided, the default region is used. Only works with the kinesis-mock KINESIS_PROVIDER.

# # OpenSearch Features
# OPENSEARCH_CUSTOM_BACKEND=0        #URL to a custom OpenSearch backend cluster. If this is set to a valid URL, then LocalStack will not create OpenSearch cluster instances, but instead forward all domains to the given backend (see Custom Opensearch Backends).
# OPENSEARCH_MULTI_CLUSTER=0        #When activated, LocalStack will spawn one OpenSearch cluster per domain. Otherwise all domains will share a single cluster instance. This is ignored if OPENSEARCH_CUSTOM_BACKEND is set.
# OPENSEARCH_ENDPOINT_STRATEGY=0        #Governs how domain endpoints are created to access a cluster (see Opensearch Endpoints).

# # RDS Features
# RDS_PG_CUSTOM_VERSIONS=0        #Whether to install and use custom Postgres versions for RDS (or alternatively, use default version 11).

# # EKS Features
# EKS_LOADBALANCER_PORT=8081        # Port number for the EKS load balancer service. Default 8081.

# # StepFunctions Features
# STEPFUNCTIONS_LAMBDA_ENDPOINT=default     # URL to use as the Lambda service endpoint in Step Functions. By default this is the LocalStack Lambda endpoint. Use default to select the original AWS Lambda endpoint.

# # Email Features
# SMTP_HOST=0        #Hostname of the SMTP server. The port defaults to 25.
# SMTP_USER=0        #Login username for the SMTP server if required.
# SMTP_PASS=0        #Login password for the SMTP server if required.
# SMTP_EMAIL=0        #Origin email address. Required for Cognito only.

# # Security Features
# DISABLE_CORS_HEADERS=0        #Whether to disable the returning of default CORS headers in API responses (disables access from https://app.localstack.cloud).
# DISABLE_CORS_CHECKS=0        #Whether to disable all CSRF (server-side) mitigations.
# DISABLE_CUSTOM_CORS_S3=0        #Whether to disable CORS override by S3.
# DISABLE_CUSTOM_CORS_APIGATEWAY=0        #Whether to disable CORS override by apigateway.
# EXTRA_CORS_ALLOWED_ORIGINS=0        #Comma-separated list of origins that are allowed to communicate with localstack.
# EXTRA_CORS_ALLOWED_HEADERS=0        #Comma-separated list of header names to be be added to Access-Control-Allow-Headers CORS header.
# EXTRA_CORS_EXPOSE_HEADERS=0        #Comma-separated list of header names to be be added to Access-Control-Expose-Headers CORS header.
# ENABLE_CONFIG_UPDATES=0        #Whether to enable dynamic configuration updates at runtime.

# Miscellaneous Features
SKIP_INFRA_DOWNLOADS=0           # Whether to skip downloading additional infrastructure components (e.g., specific Elasticsearch versions)
SKIP_SSL_CERT_DOWNLOAD=0         # Whether to skip downloading the SSL certificate for localhost.localstack.cloud
# CUSTOM_SSL_CERT_PATH=/var/lib/localstack/custom/server.test.pem
# IGNORE_ES_DOWNLOAD_ERRORS=1      # Whether to ignore errors (e.g., network/SSL) when downloading Elasticsearch plugins
# OVERRIDE_IN_DOCKER=true          # Overrides the check whether LocalStack is executed within a docker container. If set to true, LocalStack assumes it runs in a docker container. Should not be set unless necessary.
# EDGE_FORWARD_URL=https://someurl.com:3030                 # Optional target URL to forward all edge requests to (e.g., for distributed deployments)
# MOCK_UNIMPLEMENTED=0                                      # Whether to return mocked success responses (instead of 501 errors) for currently unimplemented API methods
# DISABLE_EVENTS=0                                          # Whether to return mocked success responses (instead of 501 errors) for currently unimplemented API methods
# OUTBOUND_HTTP_PROXY=http://10.10.1.3                      # HTTP Proxy used for downloads of runtime dependencies and connections outside LocalStack itself
# OUTBOUND_HTTPS_PROXY=http://10.10.1.3                     # HTTPS Proxy used for downloads of runtime dependencies and connections outside LocalStack itself
# REQUESTS_CA_BUNDLE=/var/lib/localstack/lib/ca_bundle.pem  # CA Bundle to be used to verify HTTPS requests made by LocalStack
# DISABLE_TERM_HANDLER=0                                      # Whether to disable signal passing to LocalStack when running in docker. Enabling this will prevent an orderly shutdown when running inside LS in docker.


# Pro Features:
REQUIRE_PRO=0 
# LOCALSTACK_API_KEY=${LOCALSTACK_API_KEY-}  # only required for Pro
# LOG_LICENSE_ISSUES=0

# Pro Features: S3
# S3_DIR=${LOCAL_S3_DIR} # LocalStack Pro Feature persist S3 Data in a local directory